---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

<div
  class={twMerge(
    "flex flex-col space-y-2 w-full", // <- aquí controlas la separación
    containerClass
  )}
  data-accordion-group
>
  {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => (
    <div
      class={twMerge(
        "rounded-xl shadow-sm bg-white dark:bg-gray-900 overflow-hidden", // cada FAQ con borde redondeado
        panelClass,
        itemClasses?.panel
      )}
      data-accordion
    >
      <!-- Botón -->
      <button
        class="w-full flex items-center justify-between px-4 py-3 font-semibold text-left cursor-pointer transition-colors hover:text-primary"
        data-accordion-btn
      >
        <div class="flex items-center">
          
          <span class={twMerge("text-lg", titleClass, itemClasses?.title)}>{title}</span>
        </div>
        <Icon
          name="tabler:chevron-up"
          class="w-5 h-5 transition-transform duration-300"
          data-accordion-icon
        />
      </button>

      <!-- Contenido colapsable -->
      <div
        class="grid transition-all duration-300 ease-in-out max-h-0 overflow-hidden px-4"
        data-accordion-content
      >
        <div class="pb-4 pt-2 text-muted">
          <p set:html={description} />
          {callToAction && (
            <div class={twMerge("mt-3", actionClass, itemClasses?.actionClass)}>
              <Button variant="link" {...callToAction} />
            </div>
          )}
        </div>
      </div>
    </div>
  ))}
</div>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const groups = document.querySelectorAll("[data-accordion-group]");

    groups.forEach((group) => {
      const items = group.querySelectorAll("[data-accordion]");

      items.forEach((item) => {
        const btn = item.querySelector<HTMLButtonElement>("[data-accordion-btn]");
        const content = item.querySelector<HTMLElement>("[data-accordion-content]");
        const icon = item.querySelector<HTMLElement>("[data-accordion-icon]");

        if (btn && content && icon) {
          btn.addEventListener("click", () => {
            const isOpen = item.classList.contains("open");

            // cerrar todos
            items.forEach((el) => {
              el.classList.remove("open");
              const elContent = el.querySelector<HTMLElement>("[data-accordion-content]");
              const elIcon = el.querySelector<HTMLElement>("[data-accordion-icon]");
              if (elContent) elContent.style.maxHeight = "";
              if (elIcon) elIcon.style.transform = "rotate(0deg)";
            });

            // abrir clickeado
            if (!isOpen) {
              item.classList.add("open");
              content.style.maxHeight = `${content.scrollHeight}px`;
              icon.style.transform = "rotate(180deg)";
            }
          });
        }
      });
    });
  });
</script>
